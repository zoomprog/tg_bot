from aiogram import types
from aiogram.fsm.context import FSMContext
from keyboards.keyboards import (
    get_main_keyboard, get_1c_keyboard, get_reclamations_keyboard,
    get_knowledge_base_keyboard, get_equipment_servicing_keyboard,
    get_about_company_keyboard, get_tech_support_keyboard,
    get_nesting_check_keyboard, get_menu_button_keyboard,
    get_subcategory_button_keyboard, get_sub_sib_category_button_keyboard
)
from states.states import MenuStates
from utils.document_sender import send_document_with_caption
from data.data import (
    ACTION_NAMES, TEXT_reclamation_klon, TEXT_reclamation_masterglass,
    TEXT_reclamation_region50, TEXT_reclamation_metronom
)
from aiogram.exceptions import TelegramBadRequest

async def handle_buttons(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –º–µ–Ω—é
    if action == "back_to_nesting":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            reply_markup=get_nesting_check_keyboard()
        )
        return

    elif action == "back_to_subcategory":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            reply_markup=get_subcategory_button_keyboard()
        )
        return

    elif action == "back_to_main":
        await callback.message.edit_text(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?",
            reply_markup=get_main_keyboard()
        )
        await state.set_state(MenuStates.main_menu)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –º–µ–Ω—é
    handlers = {
        "1c_menu": (get_1c_keyboard(), MenuStates.one_c_submenu),
        "reclamation": (get_reclamations_keyboard(), MenuStates.reclamations_submenu),
        "knowledge_base": (get_knowledge_base_keyboard(), MenuStates.knowledge_base_submenu),
        "equipment_servicing": (get_equipment_servicing_keyboard(), MenuStates.equipment_servicing_submenu),
        "about_the_company": (get_about_company_keyboard(), MenuStates.about_company_submenu),
        "technical_support": (get_tech_support_keyboard(), MenuStates.tech_support_submenu),
        "checking_nesting": (get_nesting_check_keyboard(), MenuStates.nesting_check_submenu),
    }

    if action in handlers:
        keyboard, new_state = handlers[action]
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            reply_markup=keyboard
        )
        await state.set_state(new_state)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ 1–°
    documents_1c = {
        "1c_create_shipping": ("file/1c/–°–æ–∑–¥–∞–Ω–∏–µ_–æ—Ç–≥—Ä—É–∑–æ—á–Ω–æ–π_–Ω–∞–∫–ª–∞–¥–Ω–æ–π.pdf", "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–æ—á–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π"),
        "1c_return": ("file/1c/–í–æ–∑–≤—Ä–∞—Ç_–æ—Ç_–ø–æ–∫—É–ø–∞—Ç–µ–ª—è.pdf", "–í–æ–∑–≤—Ä–∞—Ç –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"),
        "1c_create_contractor": ("file/1c/–°–æ–∑–¥–∞–Ω–∏–µ_–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞.pdf", "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"),
        "1c_create_nomenclature": ("file/1c/–°–æ–∑–¥–∞–Ω–∏–µ_–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã.pdf", "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"),
        "1c_create_order": ("file/1c/–°–æ–∑–¥–∞–Ω–∏–µ_–ó–∞–∫–∞–∑–∞_–ü–æ–∫—É–ø–∞—Ç–µ–ª—è_–∏_–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ_—Å—á—ë—Ç–∞.pdf", "–°–æ–∑–¥–∞–Ω–∏–µ –ó–∞–∫–∞–∑–∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è"),
    }

    if action in documents_1c:
        file_path, caption_text = documents_1c[action]
        await callback.message.delete()
        await send_document_with_caption(
            callback.message,
            file_path,
            f"–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: {caption_text}",
            get_menu_button_keyboard()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ–Ω—é
    if action == "nesting_first":
        await callback.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é',
            reply_markup=get_subcategory_button_keyboard()
        )
        return
    
    elif action == "nesting_second":
        try:
            await callback.message.edit_text(
                '–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ',
                reply_markup=get_menu_button_keyboard()
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback.message.answer('–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ', reply_markup=get_menu_button_keyboard())
            else:
                raise
        return
    
    elif action == "nesting_third":
        try:
            await callback.message.edit_text(
                '–û–∂–∏–¥–∞–π—Ç–µ... üòä',
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback.message.answer('–û–∂–∏–¥–∞–π—Ç–µ... üòä')
            else:
                raise
        return
    

    elif action == "sub_sub_category":
        await callback.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é',
            reply_markup=get_sub_sib_category_button_keyboard()
        )
        return

    elif action == "2_sub_sub_category":
        await callback.message.edit_text(
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ 2 –ü–æ–¥–ü–æ–¥–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            reply_markup=get_menu_button_keyboard()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–π
    reclamation_handlers = {
        "reclamation_klon": (TEXT_reclamation_klon, None),
        "reclamation_masterglass": (TEXT_reclamation_masterglass, None),
        "reclamation_region50": (TEXT_reclamation_region50, None),
        "reclamation_metronom": (TEXT_reclamation_metronom, None),
        "reclamation_restinternational": (None, ("file/COMPANY/–†–µ—Å—Ç–∏–Ω—Ç–µ—Ä–Ω–µ—à–Ω–ª.docx", "–†–µ—Å—Ç–∏–Ω—Ç–µ—Ä–Ω–µ—à–Ω–ª")),
    }

    if action in reclamation_handlers:
        text, file_info = reclamation_handlers[action]
        await callback.message.delete()
        if text:
            await callback.message.answer(text, reply_markup=get_menu_button_keyboard())
        elif file_info:
            file_path, caption_text = file_info
            await send_document_with_caption(
                callback.message,
                file_path,
                f"–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è {caption_text}",
                get_menu_button_keyboard()
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    kb_documents = {
        "kb_syrups_toppings": ("file/KnowledgeBase/–°–∏—Ä–æ–ø—ã,_—Ç–æ–ø–∏–Ω–≥–∏,_–ø—é—Ä–µ.pdf", "–°–∏—Ä–æ–ø—ã, —Ç–æ–ø–∏–Ω–≥–∏, –ø—é—Ä–µ"),
        "kb_bar_inventory": ("file/KnowledgeBase/–ë–∞—Ä–Ω—ã–π_–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.pdf", "–ë–∞—Ä–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
    }

    if action in kb_documents:
        file_path, caption_text = kb_documents[action]
        await callback.message.delete()
        await send_document_with_caption(
            callback.message,
            file_path,
            f"–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è {caption_text}",
            get_menu_button_keyboard()
        )
        return

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if action == "main_menu":
        await callback.message.delete()
        await callback.message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?",
            reply_markup=get_main_keyboard()
        )
        await state.set_state(MenuStates.main_menu)
        return

    elif action == "kb_equipment":
        await callback.message.delete()
        await callback.message.answer('–û–∂–∏–¥–∞–π—Ç–µ... üòä')
        return

    elif action == "even_more_invested":
        await callback.message.edit_text(
            '–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ',
            reply_markup=get_menu_button_keyboard()
        )
        return
